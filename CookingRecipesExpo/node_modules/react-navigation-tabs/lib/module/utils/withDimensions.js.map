{"version":3,"sources":["withDimensions.tsx"],"names":["React","Dimensions","hoistNonReactStatic","isOrientationLandscape","width","height","withDimensions","WrappedComponent","get","EnhancedComponent","state","dimensions","isLandscape","handleOrientationChange","window","setState","addEventListener","removeEventListener","props","Component","displayName"],"mappings":"+eAAA,MAAO,GAAKA,CAAAA,KAAZ,KAAuB,OAAvB,CACA,OAASC,UAAT,KAAuC,cAAvC,CACA,MAAOC,CAAAA,mBAAP,KAAgC,yBAAhC,CAYA,MAAO,IAAMC,CAAAA,sBAAsB,CAAG,QAAzBA,CAAAA,sBAAyB,UAAGC,CAAAA,KAAH,MAAGA,KAAH,CAAUC,MAAV,MAAUA,MAAV,OACpCD,CAAAA,KAAK,CAAGC,MAD4B,EAA/B,CAGP,cAAe,SAASC,CAAAA,cAAT,CACbC,gBADa,CAEgE,qBACnDN,UAAU,CAACO,GAAX,CAAe,QAAf,CADmD,CACrEJ,KADqE,iBACrEA,KADqE,CAC9DC,MAD8D,iBAC9DA,MAD8D,IAGvEI,CAAAA,iBAHuE,0aAM3EC,KAN2E,CAMnE,CACNC,UAAU,CAAE,CAAEP,KAAK,CAALA,KAAF,CAASC,MAAM,CAANA,MAAT,CADN,CAENO,WAAW,CAAET,sBAAsB,CAAC,CAAEC,KAAK,CAALA,KAAF,CAASC,MAAM,CAANA,MAAT,CAAD,CAF7B,CANmE,OAmB3EQ,uBAnB2E,CAmBjD,eAAwC,IAArCC,CAAAA,MAAqC,OAArCA,MAAqC,CAChE,GAAMF,CAAAA,WAAW,CAAGT,sBAAsB,CAACW,MAAD,CAA1C,CACA,MAAKC,QAAL,CAAc,CAAEH,WAAW,CAAXA,WAAF,CAAd,EACD,CAtB0E,0GAWvD,CAClBX,UAAU,CAACe,gBAAX,CAA4B,QAA5B,CAAsC,KAAKH,uBAA3C,EACD,CAb0E,mEAepD,CACrBZ,UAAU,CAACgB,mBAAX,CAA+B,QAA/B,CAAyC,KAAKJ,uBAA9C,EACD,CAjB0E,uCAwBlE,CAEP,MAAO,qBAAC,gBAAD,aAAsB,KAAKK,KAA3B,CAAsC,KAAKR,KAA3C,mDAAP,CACD,CA3B0E,+BAG7CV,KAAK,CAACmB,SAHuC,EAGvEV,iBAHuE,CAIpEW,WAJoE,mBAIpCb,gBAAgB,CAACa,WAJmB,KA+B7E,MAAOlB,CAAAA,mBAAmB,CAACO,iBAAD,CAAoBF,gBAApB,CAA1B,CACD","sourcesContent":["import * as React from 'react';\nimport { Dimensions, ScaledSize } from 'react-native';\nimport hoistNonReactStatic from 'hoist-non-react-statics';\n\ntype DimensionsType = {\n  width: number;\n  height: number;\n};\n\ntype InjectedProps = {\n  dimensions: DimensionsType;\n  isLandscape: boolean;\n};\n\nexport const isOrientationLandscape = ({ width, height }: DimensionsType) =>\n  width > height;\n\nexport default function withDimensions<Props extends InjectedProps>(\n  WrappedComponent: React.ComponentType<Props>\n): React.ComponentType<Pick<Props, Exclude<keyof Props, keyof InjectedProps>>> {\n  const { width, height } = Dimensions.get('window');\n\n  class EnhancedComponent extends React.Component {\n    static displayName = `withDimensions(${WrappedComponent.displayName})`;\n\n    state = {\n      dimensions: { width, height },\n      isLandscape: isOrientationLandscape({ width, height }),\n    };\n\n    componentDidMount() {\n      Dimensions.addEventListener('change', this.handleOrientationChange);\n    }\n\n    componentWillUnmount() {\n      Dimensions.removeEventListener('change', this.handleOrientationChange);\n    }\n\n    handleOrientationChange = ({ window }: { window: ScaledSize }) => {\n      const isLandscape = isOrientationLandscape(window);\n      this.setState({ isLandscape });\n    };\n\n    render() {\n      // @ts-ignore\n      return <WrappedComponent {...this.props} {...this.state} />;\n    }\n  }\n\n  // @ts-ignore\n  return hoistNonReactStatic(EnhancedComponent, WrappedComponent);\n}\n"]}